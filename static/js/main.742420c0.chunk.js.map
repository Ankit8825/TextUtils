{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","placeholder","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","console","log","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","substring","document","getElementById","select","navigator","clipboard","writeText","split","join","length","Alert","alert","role","msg","About","border","myStyle","setMyStyle","btnText","setBtnText","App","setMode","setAlert","message","setTimeout","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.742420c0.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n                        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n                  <div className=\"container-fluid\">\r\n                    {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n                    <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                      <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                          {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n                          <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n                        </li>\r\n                        {/* <li className=\"nav-item\">\r\n                          <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n                        </li> */}\r\n                        \r\n                      </ul>\r\n                      <form className=\"d-flex\">\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n                        <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\r\n                      </form>\r\n                     <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'} mx-2`}>\r\n                          <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n                          <label className=\"form-check-label \" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n                     </div>\r\n                    </div>\r\n                  </div>\r\n                </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes={title: PropTypes.string.isRequired,\r\n                  about: PropTypes.string\r\n                }","import React,{useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick=()=>{\r\n        console.log(\"Upper case was clicked\" + text);\r\n        let newText=text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to upper case\",\"success\");\r\n    }\r\n\r\n    const handleLoClick=()=>{\r\n        console.log(\"Lower case was clicked\" + text);\r\n        let newText=text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to lower case\",\"success\");\r\n    }\r\n\r\n    const handleclearClick=()=>{\r\n        console.log(\"Clear text was clicked\" + text);\r\n        let newText=\"\";\r\n        setText(newText)\r\n        props.showAlert(\"Text cleared\",\"success\");\r\n    }\r\n\r\n    const handlesubstrClick=()=>{\r\n        console.log(\"Substring was clicked\" + text);\r\n        let newText=text.substring(0,4);\r\n        setText(newText)\r\n        props.showAlert(\"Sunstring formed\",\"success\");\r\n    }\r\n\r\n    const handleCopy=() =>{\r\n        console.log(\"I am copy\");\r\n        var text=document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Text Copied\",\"success\");\r\n    }\r\n\r\n    const handleExtraSpaces=() =>{\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"Extra Space removed\",\"success\");\r\n    }\r\n\r\n    \r\n\r\n    const handleOnChange=(event)=>{\r\n        console.log(\"On change\");\r\n        setText(event.target.value);\r\n    } \r\n\r\n\r\n    const [text, setText] = useState(\"\");\r\n    //text=\"New text\";    //Wrong way to set the text\r\n    //setText(\"Mew text\");   //Correct way to set the text\r\n\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color:props.mode==='dark'?'white':'black'}}>\r\n            <h1>{props.heading}  </h1>\r\n           <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'grey':'white', color:props.mode==='dark'?'white':'black'}} id=\"myBox\" rows=\"8\"></textarea>\r\n           </div>\r\n           <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n           <button className=\"btn btn-primary mx-1\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n           <button className=\"btn btn-primary mx-1\" onClick={handleclearClick}>Clear Text</button>\r\n           <button className=\"btn btn-primary mx-1\" onClick={handlesubstrClick}>Substring</button>\r\n           <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>Copy Text</button>\r\n           <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n        </div>\r\n        <div className=\"container my-2\">\r\n            <h1>Your Text Summary</h1>\r\n            <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n            <p>Time required to read the above sentence :{0.008*text.split(\" \").length}</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"Enter something to preview here\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\n function Alert(props) {\r\n    // const capitalize= (word)=>{\r\n    //     if(word.length>0){\r\n    //     return (word.charAt(0).toUpperCase() +word.slice(1))\r\n    //     }else{\r\n    //     return \"\";\r\n    //     }\r\n\r\n        \r\n    //     return (word.charAt(0).toUpperCase() + word.slice(1));\r\n    // }\r\n    return (\r\n        \r\n            props.alert &&  <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                 <strong>{props.alert.type}</strong> :{props.alert.msg}\r\n                 \r\n                \r\n            </div>\r\n            \r\n        \r\n    )\r\n}\r\n\r\nexport default Alert\r\n ","import React,{useState} from 'react'\r\n\r\nexport default function About() {\r\n    \r\n    const [myStyle, setMyStyle] = useState({\r\n        color: 'white',\r\n        backgroundColor:'black',\r\n        border:'1px solid white'\r\n    })\r\n\r\n    const [btnText, setBtnText] = useState(\"Enable Light mode\")\r\n\r\n    const toggleStyle =()=>{\r\n        if(myStyle.color ==='white'){\r\n            setMyStyle({\r\n                color:'black',\r\n                backgroundColor:'white'\r\n            })\r\n            setBtnText(\"Enable Dark Mode\")\r\n        }\r\n        else{\r\n            setMyStyle({\r\n                color: 'white',\r\n            backgroundColor: 'black',\r\n            border:'1px solid white'\r\n\r\n            })\r\n            setBtnText(\"Enable Light Mode\")\r\n            \r\n        }\r\n    }\r\n    \r\n\r\n\r\n\r\n    return (\r\n    <div className=\"container\" style={myStyle}>\r\n        <h2>About Us</h2>\r\n        <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\r\n            <div className=\"accordion-item\" style={myStyle}>\r\n                <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                <button className=\"accordion-button\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                    Accordion Item #1\r\n                </button>\r\n                </h2>\r\n                <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                <div className=\"accordion-body\">\r\n                    <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"accordion-item\" style={myStyle}>\r\n                <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                    Accordion Item #2\r\n                </button>\r\n                </h2>\r\n                <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                <div className=\"accordion-body\">\r\n                    <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"accordion-item\" style={myStyle}>\r\n                <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                    Accordion Item #3\r\n                </button>\r\n                </h2>\r\n                <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                <div className=\"accordion-body\" style={myStyle}>\r\n                    <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                </div>\r\n                </div>\r\n            </div>\r\n            </div>\r\n            <div className=\"container my-3\">\r\n                  <button onClick={toggleStyle} className=\"btn btn-success \">{btnText}</button>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","// import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\nimport About from './components/About';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\n//import About from './components/About';\n\n\nfunction App() {                                //Function based component is used widely than class based component\n  const [mode, setMode] = useState('light');                    //State variable which shows whether the dark mode is on or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert =(message,type) =>{\n    setAlert({\n      msg:message,\n      type:type\n    }\n    )\n\n    setTimeout(() => {\n      showAlert(null);\n    }, 3000);\n\n  }\n  const toggleMode = ()=>{\n    if(mode==='light'){\n      setMode('dark');\n      document.body.style.backgroundColor=\"grey\";\n      showAlert(\"Dark mode has been enabled\",\"success\");\n      document.title=\"TextUtils-Dark Mode\";\n    \n      // For setting any text in title for interval\n\n    // setInterval(() => {\n    //   document.title=\"TextUtils is amazing\";\n    // }, 2000);\n    // setInterval(() => {\n    //   document.title=\"Install TextUtils Now\";\n    // }, 1500);\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor=\"white\";\n      showAlert(\"Light mode has been enabled\",\"success\");\n      document.title=\"TextUtils-Light Mode\";\n\n    }\n  }\n  return (                        // Returns only one element\n    // <>\n    // <h1>This is the site</h1>\n    // <div className=\"App\">\n    //   <header className=\"App-header\">\n    //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    //     <p>\n    //       Edit <code>src/App.js</code> and save to reload.\n    //     </p>\n    //     <a\n    //       className=\"App-link\"\n    //       href=\"https://reactjs.org\"                         //The code under div here is JSX which is an html code hiding with JS\n    //       target=\"_blank\"\n    //       rel=\"noopener noreferrer\"\n    //     >\n    //       Learn React with Ankit\n    //     </a>\n    //   </header>\n    // </div>\n    // </>\n    \n    \n\n    // <div className=\"blank\">Lovely</div>\n\n    // <>\n    // <nav>\n    //   <li>Home</li>\n    //   <li>About</li>\n    //   <li>Contact</li>\n\n    //   <h1>Hello {name}</h1>\n\n    //   <div className=\"container\">\n    //     <p>\n    //       Lorem ipsum dolor sit amet consectetur adipisicing elit. Vel atque rerum doloremque nostrum laudantium. Quidem voluptas eius repudiandae atque error aliquam, ex aliquid eaque numquam obcaecati rem blanditiis optio tenetur cumque, dignissimos ut ab.\n    //     </p>\n    //   </div>\n\n    // </nav>\n    // </>\n\n     // My First Project \n     <>\n     <Router>\n        <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode}/>\n        <Alert alert={alert}/>\n        <div className='container my-3'>\n\n        <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\">\n             <TextForm showAlert={showAlert} heading=\"Enter the text to be analyse below\" mode={mode}/>\n          </Route>\n        </Switch>\n        </div>\n      </Router>  \n        \n     </> \n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}